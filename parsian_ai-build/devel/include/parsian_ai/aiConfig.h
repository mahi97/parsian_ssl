//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the ai_config package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __ai_config__AICONFIG_H__
#define __ai_config__AICONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ai_config
{
  class aiConfigStatics;
  
  class aiConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(aiConfig &config, const aiConfig &max, const aiConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const aiConfig &config1, const aiConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, aiConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const aiConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, aiConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const aiConfig &config) const = 0;
      virtual void getValue(const aiConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T aiConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (aiConfig::* field);

      virtual void clamp(aiConfig &config, const aiConfig &max, const aiConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const aiConfig &config1, const aiConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, aiConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const aiConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, aiConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const aiConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const aiConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, aiConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, aiConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<aiConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class FORMATION
{
  public:
    FORMATION()
    {
      state = true;
      name = "Formation";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("StrictFormation"==(*_i)->name){StrictFormation = boost::any_cast<bool>(val);}
        if("GoalieFromGUI"==(*_i)->name){GoalieFromGUI = boost::any_cast<bool>(val);}
        if("Goalie"==(*_i)->name){Goalie = boost::any_cast<int>(val);}
        if("Defense"==(*_i)->name){Defense = boost::any_cast<int>(val);}
      }
    }

    bool StrictFormation;
bool GoalieFromGUI;
int Goalie;
int Defense;

    bool state;
    std::string name;

    
}formation;

class DEFENSE
{
  public:
    DEFENSE()
    {
      state = true;
      name = "Defense";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("NoClear"==(*_i)->name){NoClear = boost::any_cast<bool>(val);}
        if("DyanmicDefense"==(*_i)->name){DyanmicDefense = boost::any_cast<bool>(val);}
        if("Probability"==(*_i)->name){Probability = boost::any_cast<double>(val);}
      }
    }

    bool NoClear;
bool DyanmicDefense;
double Probability;

    bool state;
    std::string name;

    
}defense;

class PLAYOFF
{
  public:
    PLAYOFF()
    {
      state = true;
      name = "PlayOff";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("IDBasePasser"==(*_i)->name){IDBasePasser = boost::any_cast<bool>(val);}
        if("PasserID"==(*_i)->name){PasserID = boost::any_cast<int>(val);}
        if("IDBaseOneToucher"==(*_i)->name){IDBaseOneToucher = boost::any_cast<bool>(val);}
        if("OneToucherID"==(*_i)->name){OneToucherID = boost::any_cast<int>(val);}
        if("UseFastPlay"==(*_i)->name){UseFastPlay = boost::any_cast<bool>(val);}
        if("UseFirstPlay"==(*_i)->name){UseFirstPlay = boost::any_cast<bool>(val);}
        if("UseBlockBlocker"==(*_i)->name){UseBlockBlocker = boost::any_cast<bool>(val);}
        if("UseForcedBlock"==(*_i)->name){UseForcedBlock = boost::any_cast<bool>(val);}
      }
    }

    bool IDBasePasser;
int PasserID;
bool IDBaseOneToucher;
int OneToucherID;
bool UseFastPlay;
bool UseFirstPlay;
bool UseBlockBlocker;
bool UseForcedBlock;

    bool state;
    std::string name;

    
}playoff;

class DYNAMICPLAY
{
  public:
    DYNAMICPLAY()
    {
      state = true;
      name = "DynamicPlay";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("LowSpeedPass"==(*_i)->name){LowSpeedPass = boost::any_cast<double>(val);}
        if("MediumSpeedPass"==(*_i)->name){MediumSpeedPass = boost::any_cast<double>(val);}
        if("HighSpeedPass"==(*_i)->name){HighSpeedPass = boost::any_cast<double>(val);}
        if("LowDistChip"==(*_i)->name){LowDistChip = boost::any_cast<double>(val);}
        if("MediumDistChip"==(*_i)->name){MediumDistChip = boost::any_cast<double>(val);}
        if("HighDistChip"==(*_i)->name){HighDistChip = boost::any_cast<double>(val);}
        if("FarForward"==(*_i)->name){FarForward = boost::any_cast<bool>(val);}
        if("NearForward"==(*_i)->name){NearForward = boost::any_cast<bool>(val);}
        if("Area"==(*_i)->name){Area = boost::any_cast<double>(val);}
        if("DirectTrsh"==(*_i)->name){DirectTrsh = boost::any_cast<double>(val);}
        if("SupportPriority"==(*_i)->name){SupportPriority = boost::any_cast<int>(val);}
        if("DribbleEveryWhere"==(*_i)->name){DribbleEveryWhere = boost::any_cast<bool>(val);}
        if("DribbleInFast"==(*_i)->name){DribbleInFast = boost::any_cast<bool>(val);}
        if("ChipForward"==(*_i)->name){ChipForward = boost::any_cast<bool>(val);}
      }
    }

    double LowSpeedPass;
double MediumSpeedPass;
double HighSpeedPass;
double LowDistChip;
double MediumDistChip;
double HighDistChip;
bool FarForward;
bool NearForward;
double Area;
double DirectTrsh;
int SupportPriority;
bool DribbleEveryWhere;
bool DribbleInFast;
bool ChipForward;

    bool state;
    std::string name;

    
}dynamicplay;

class MARK
{
  public:
    MARK()
    {
      state = true;
      name = "Mark";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("PlayOffManToMan"==(*_i)->name){PlayOffManToMan = boost::any_cast<bool>(val);}
        if("PlayOnManToMan"==(*_i)->name){PlayOnManToMan = boost::any_cast<bool>(val);}
        if("ManToManAllTransiant"==(*_i)->name){ManToManAllTransiant = boost::any_cast<bool>(val);}
        if("ManToManSomeTransiant"==(*_i)->name){ManToManSomeTransiant = boost::any_cast<bool>(val);}
        if("OmmitWhoCouldNotReceivePass"==(*_i)->name){OmmitWhoCouldNotReceivePass = boost::any_cast<bool>(val);}
        if("OppOmitLimitPlayon"==(*_i)->name){OppOmitLimitPlayon = boost::any_cast<double>(val);}
        if("OppOmitLimitPlayoff"==(*_i)->name){OppOmitLimitPlayoff = boost::any_cast<double>(val);}
        if("OppOmitLimitKickOff"==(*_i)->name){OppOmitLimitKickOff = boost::any_cast<double>(val);}
        if("ShootRatioBlock"==(*_i)->name){ShootRatioBlock = boost::any_cast<double>(val);}
        if("PassRatioBlock"==(*_i)->name){PassRatioBlock = boost::any_cast<double>(val);}
        if("OmmitNearestToBallPlayon"==(*_i)->name){OmmitNearestToBallPlayon = boost::any_cast<bool>(val);}
        if("IntelligentMarkType"==(*_i)->name){IntelligentMarkType = boost::any_cast<bool>(val);}
        if("IntelligentMarkPrediction"==(*_i)->name){IntelligentMarkPrediction = boost::any_cast<bool>(val);}
        if("VelReliability"==(*_i)->name){VelReliability = boost::any_cast<double>(val);}
      }
    }

    bool PlayOffManToMan;
bool PlayOnManToMan;
bool ManToManAllTransiant;
bool ManToManSomeTransiant;
bool OmmitWhoCouldNotReceivePass;
double OppOmitLimitPlayon;
double OppOmitLimitPlayoff;
double OppOmitLimitKickOff;
double ShootRatioBlock;
double PassRatioBlock;
bool OmmitNearestToBallPlayon;
bool IntelligentMarkType;
bool IntelligentMarkPrediction;
double VelReliability;

    bool state;
    std::string name;

    
}mark;

class PASSPOSITION
{
  public:
    PASSPOSITION()
    {
      state = true;
      name = "PassPosition";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("Big_Step_X"==(*_i)->name){Big_Step_X = boost::any_cast<double>(val);}
        if("Big_Step_Y"==(*_i)->name){Big_Step_Y = boost::any_cast<double>(val);}
        if("Small_Step_X"==(*_i)->name){Small_Step_X = boost::any_cast<double>(val);}
        if("Small_Step_Y"==(*_i)->name){Small_Step_Y = boost::any_cast<double>(val);}
        if("Ball_Decel"==(*_i)->name){Ball_Decel = boost::any_cast<double>(val);}
        if("ChipPass_Recv_StayBackFactor"==(*_i)->name){ChipPass_Recv_StayBackFactor = boost::any_cast<double>(val);}
      }
    }

    double Big_Step_X;
double Big_Step_Y;
double Small_Step_X;
double Small_Step_Y;
double Ball_Decel;
double ChipPass_Recv_StayBackFactor;

    bool state;
    std::string name;

    
}passposition;

class LINEUP
{
  public:
    LINEUP()
    {
      state = true;
      name = "LineUp";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("startPoint_X"==(*_i)->name){startPoint_X = boost::any_cast<double>(val);}
        if("startPoint_Y"==(*_i)->name){startPoint_Y = boost::any_cast<double>(val);}
        if("lineDirection"==(*_i)->name){lineDirection = boost::any_cast<double>(val);}
      }
    }

    double startPoint_X;
double startPoint_Y;
double lineDirection;

    bool state;
    std::string name;

    
}lineup;

class COACH
{
  public:
    COACH()
    {
      state = true;
      name = "Coach";
    }

    void setParams(aiConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("kickThreshold"==(*_i)->name){kickThreshold = boost::any_cast<double>(val);}
        if("oneTouchKickThreshold"==(*_i)->name){oneTouchKickThreshold = boost::any_cast<double>(val);}
        if("oneTouchAngleThreshold"==(*_i)->name){oneTouchAngleThreshold = boost::any_cast<double>(val);}
        if("kickClosedAngle"==(*_i)->name){kickClosedAngle = boost::any_cast<double>(val);}
        if("numberOfDefenseEval"==(*_i)->name){numberOfDefenseEval = boost::any_cast<int>(val);}
        if("useGoalieInPlayoff"==(*_i)->name){useGoalieInPlayoff = boost::any_cast<bool>(val);}
        if("playMakeStopThr"==(*_i)->name){playMakeStopThr = boost::any_cast<double>(val);}
        if("playMakeMoveThr"==(*_i)->name){playMakeMoveThr = boost::any_cast<double>(val);}
        if("penaltyMargin"==(*_i)->name){penaltyMargin = boost::any_cast<double>(val);}
      }
    }

    double kickThreshold;
double oneTouchKickThreshold;
double oneTouchAngleThreshold;
double kickClosedAngle;
int numberOfDefenseEval;
bool useGoalieInPlayoff;
double playMakeStopThr;
double playMakeMoveThr;
double penaltyMargin;

    bool state;
    std::string name;

    
}coach;

}groups;



//#line 17 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool StrictFormation;
//#line 18 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool GoalieFromGUI;
//#line 19 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      int Goalie;
//#line 20 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      int Defense;
//#line 23 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool NoClear;
//#line 24 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool DyanmicDefense;
//#line 25 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double Probability;
//#line 28 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool IDBasePasser;
//#line 29 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      int PasserID;
//#line 30 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool IDBaseOneToucher;
//#line 31 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      int OneToucherID;
//#line 32 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool UseFastPlay;
//#line 33 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool UseFirstPlay;
//#line 34 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool UseBlockBlocker;
//#line 35 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool UseForcedBlock;
//#line 38 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double LowSpeedPass;
//#line 39 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double MediumSpeedPass;
//#line 40 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double HighSpeedPass;
//#line 41 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double LowDistChip;
//#line 42 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double MediumDistChip;
//#line 43 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double HighDistChip;
//#line 44 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool FarForward;
//#line 45 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool NearForward;
//#line 46 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double Area;
//#line 47 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double DirectTrsh;
//#line 48 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      int SupportPriority;
//#line 49 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool DribbleEveryWhere;
//#line 50 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool DribbleInFast;
//#line 51 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool ChipForward;
//#line 54 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool PlayOffManToMan;
//#line 55 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool PlayOnManToMan;
//#line 56 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool ManToManAllTransiant;
//#line 57 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool ManToManSomeTransiant;
//#line 58 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool OmmitWhoCouldNotReceivePass;
//#line 59 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double OppOmitLimitPlayon;
//#line 60 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double OppOmitLimitPlayoff;
//#line 61 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double OppOmitLimitKickOff;
//#line 62 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double ShootRatioBlock;
//#line 63 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double PassRatioBlock;
//#line 64 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool OmmitNearestToBallPlayon;
//#line 65 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool IntelligentMarkType;
//#line 66 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool IntelligentMarkPrediction;
//#line 67 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double VelReliability;
//#line 70 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double Big_Step_X;
//#line 71 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double Big_Step_Y;
//#line 72 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double Small_Step_X;
//#line 73 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double Small_Step_Y;
//#line 74 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double Ball_Decel;
//#line 75 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double ChipPass_Recv_StayBackFactor;
//#line 78 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double startPoint_X;
//#line 79 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double startPoint_Y;
//#line 80 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double lineDirection;
//#line 84 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double kickThreshold;
//#line 85 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double oneTouchKickThreshold;
//#line 86 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double oneTouchAngleThreshold;
//#line 87 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double kickClosedAngle;
//#line 88 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      int numberOfDefenseEval;
//#line 89 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      bool useGoalieInPlayoff;
//#line 90 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double playMakeStopThr;
//#line 91 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double playMakeMoveThr;
//#line 92 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      double penaltyMargin;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("aiConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const aiConfig &__max__ = __getMax__();
      const aiConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const aiConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const aiConfig &__getDefault__();
    static const aiConfig &__getMax__();
    static const aiConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const aiConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void aiConfig::ParamDescription<std::string>::clamp(aiConfig &config, const aiConfig &max, const aiConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class aiConfigStatics
  {
    friend class aiConfig;
    
    aiConfigStatics()
    {
aiConfig::GroupDescription<aiConfig::DEFAULT, aiConfig> Default("Default", "", 0, 0, true, &aiConfig::groups);
aiConfig::GroupDescription<aiConfig::DEFAULT::FORMATION, aiConfig::DEFAULT> Formation("Formation", "tab", 0, 1, true, &aiConfig::DEFAULT::formation);
//#line 17 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.StrictFormation = 0;
//#line 17 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.StrictFormation = 1;
//#line 17 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.StrictFormation = 0;
//#line 17 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Formation.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("StrictFormation", "bool", 0, "Strict Formation", "", &aiConfig::StrictFormation)));
//#line 17 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("StrictFormation", "bool", 0, "Strict Formation", "", &aiConfig::StrictFormation)));
//#line 18 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.GoalieFromGUI = 0;
//#line 18 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.GoalieFromGUI = 1;
//#line 18 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.GoalieFromGUI = 0;
//#line 18 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Formation.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("GoalieFromGUI", "bool", 0, "Goalie from GUI", "", &aiConfig::GoalieFromGUI)));
//#line 18 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("GoalieFromGUI", "bool", 0, "Goalie from GUI", "", &aiConfig::GoalieFromGUI)));
//#line 19 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Goalie = 0;
//#line 19 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Goalie = 11;
//#line 19 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Goalie = 11;
//#line 19 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Formation.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("Goalie", "int", 0, "Goalie ID", "", &aiConfig::Goalie)));
//#line 19 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("Goalie", "int", 0, "Goalie ID", "", &aiConfig::Goalie)));
//#line 20 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Defense = 0;
//#line 20 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Defense = 11;
//#line 20 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Defense = 0;
//#line 20 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Formation.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("Defense", "int", 0, "Defense Count", "", &aiConfig::Defense)));
//#line 20 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("Defense", "int", 0, "Defense Count", "", &aiConfig::Defense)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Formation.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::FORMATION, aiConfig::DEFAULT>(Formation)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::FORMATION, aiConfig::DEFAULT>(Formation)));
aiConfig::GroupDescription<aiConfig::DEFAULT::DEFENSE, aiConfig::DEFAULT> Defense("Defense", "tab", 0, 2, true, &aiConfig::DEFAULT::defense);
//#line 23 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.NoClear = 0;
//#line 23 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.NoClear = 1;
//#line 23 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.NoClear = 0;
//#line 23 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Defense.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("NoClear", "bool", 0, "No Clear", "", &aiConfig::NoClear)));
//#line 23 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("NoClear", "bool", 0, "No Clear", "", &aiConfig::NoClear)));
//#line 24 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.DyanmicDefense = 0;
//#line 24 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.DyanmicDefense = 1;
//#line 24 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.DyanmicDefense = 0;
//#line 24 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Defense.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("DyanmicDefense", "bool", 0, "Dynamic number of defense", "", &aiConfig::DyanmicDefense)));
//#line 24 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("DyanmicDefense", "bool", 0, "Dynamic number of defense", "", &aiConfig::DyanmicDefense)));
//#line 25 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Probability = 0.0;
//#line 25 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Probability = 1.0;
//#line 25 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Probability = 0.5;
//#line 25 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Defense.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Probability", "double", 0, "Probability", "", &aiConfig::Probability)));
//#line 25 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Probability", "double", 0, "Probability", "", &aiConfig::Probability)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Defense.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::DEFENSE, aiConfig::DEFAULT>(Defense)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::DEFENSE, aiConfig::DEFAULT>(Defense)));
aiConfig::GroupDescription<aiConfig::DEFAULT::PLAYOFF, aiConfig::DEFAULT> PlayOff("PlayOff", "tab", 0, 3, true, &aiConfig::DEFAULT::playoff);
//#line 28 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.IDBasePasser = 0;
//#line 28 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.IDBasePasser = 1;
//#line 28 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.IDBasePasser = 0;
//#line 28 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IDBasePasser", "bool", 0, "ID Base Passer", "", &aiConfig::IDBasePasser)));
//#line 28 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IDBasePasser", "bool", 0, "ID Base Passer", "", &aiConfig::IDBasePasser)));
//#line 29 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.PasserID = 0;
//#line 29 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.PasserID = 11;
//#line 29 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.PasserID = 0;
//#line 29 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("PasserID", "int", 0, "Passer ID", "", &aiConfig::PasserID)));
//#line 29 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("PasserID", "int", 0, "Passer ID", "", &aiConfig::PasserID)));
//#line 30 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.IDBaseOneToucher = 0;
//#line 30 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.IDBaseOneToucher = 1;
//#line 30 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.IDBaseOneToucher = 0;
//#line 30 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IDBaseOneToucher", "bool", 0, "ID Base OneToucher", "", &aiConfig::IDBaseOneToucher)));
//#line 30 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IDBaseOneToucher", "bool", 0, "ID Base OneToucher", "", &aiConfig::IDBaseOneToucher)));
//#line 31 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.OneToucherID = 0;
//#line 31 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.OneToucherID = 11;
//#line 31 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.OneToucherID = 0;
//#line 31 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("OneToucherID", "int", 0, "One Toucher ID ", "", &aiConfig::OneToucherID)));
//#line 31 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("OneToucherID", "int", 0, "One Toucher ID ", "", &aiConfig::OneToucherID)));
//#line 32 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.UseFastPlay = 0;
//#line 32 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.UseFastPlay = 1;
//#line 32 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.UseFastPlay = 0;
//#line 32 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseFastPlay", "bool", 0, "Use Fast Play", "", &aiConfig::UseFastPlay)));
//#line 32 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseFastPlay", "bool", 0, "Use Fast Play", "", &aiConfig::UseFastPlay)));
//#line 33 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.UseFirstPlay = 0;
//#line 33 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.UseFirstPlay = 1;
//#line 33 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.UseFirstPlay = 0;
//#line 33 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseFirstPlay", "bool", 0, "Use First Play", "", &aiConfig::UseFirstPlay)));
//#line 33 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseFirstPlay", "bool", 0, "Use First Play", "", &aiConfig::UseFirstPlay)));
//#line 34 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.UseBlockBlocker = 0;
//#line 34 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.UseBlockBlocker = 1;
//#line 34 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.UseBlockBlocker = 0;
//#line 34 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseBlockBlocker", "bool", 0, "Use Blocker Block", "", &aiConfig::UseBlockBlocker)));
//#line 34 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseBlockBlocker", "bool", 0, "Use Blocker Block", "", &aiConfig::UseBlockBlocker)));
//#line 35 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.UseForcedBlock = 0;
//#line 35 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.UseForcedBlock = 1;
//#line 35 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.UseForcedBlock = 0;
//#line 35 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PlayOff.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseForcedBlock", "bool", 0, "Forced Blocker Block", "", &aiConfig::UseForcedBlock)));
//#line 35 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("UseForcedBlock", "bool", 0, "Forced Blocker Block", "", &aiConfig::UseForcedBlock)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      PlayOff.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::PLAYOFF, aiConfig::DEFAULT>(PlayOff)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::PLAYOFF, aiConfig::DEFAULT>(PlayOff)));
aiConfig::GroupDescription<aiConfig::DEFAULT::DYNAMICPLAY, aiConfig::DEFAULT> DynamicPlay("DynamicPlay", "tab", 0, 4, true, &aiConfig::DEFAULT::dynamicplay);
//#line 38 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.LowSpeedPass = 0.0;
//#line 38 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.LowSpeedPass = 10.0;
//#line 38 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.LowSpeedPass = 1.0;
//#line 38 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("LowSpeedPass", "double", 0, "Low Speed Pass", "", &aiConfig::LowSpeedPass)));
//#line 38 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("LowSpeedPass", "double", 0, "Low Speed Pass", "", &aiConfig::LowSpeedPass)));
//#line 39 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.MediumSpeedPass = 0.0;
//#line 39 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.MediumSpeedPass = 10.0;
//#line 39 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.MediumSpeedPass = 3.0;
//#line 39 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("MediumSpeedPass", "double", 0, "Medium Speed Pass", "", &aiConfig::MediumSpeedPass)));
//#line 39 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("MediumSpeedPass", "double", 0, "Medium Speed Pass", "", &aiConfig::MediumSpeedPass)));
//#line 40 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.HighSpeedPass = 0.0;
//#line 40 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.HighSpeedPass = 10.0;
//#line 40 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.HighSpeedPass = 6.0;
//#line 40 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("HighSpeedPass", "double", 0, "High Speed Pass", "", &aiConfig::HighSpeedPass)));
//#line 40 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("HighSpeedPass", "double", 0, "High Speed Pass", "", &aiConfig::HighSpeedPass)));
//#line 41 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.LowDistChip = 0.0;
//#line 41 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.LowDistChip = 10.0;
//#line 41 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.LowDistChip = 1.0;
//#line 41 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("LowDistChip", "double", 0, "Low Speed Chip", "", &aiConfig::LowDistChip)));
//#line 41 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("LowDistChip", "double", 0, "Low Speed Chip", "", &aiConfig::LowDistChip)));
//#line 42 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.MediumDistChip = 0.0;
//#line 42 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.MediumDistChip = 10.0;
//#line 42 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.MediumDistChip = 3.0;
//#line 42 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("MediumDistChip", "double", 0, "Medium Speed Chip", "", &aiConfig::MediumDistChip)));
//#line 42 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("MediumDistChip", "double", 0, "Medium Speed Chip", "", &aiConfig::MediumDistChip)));
//#line 43 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.HighDistChip = 0.0;
//#line 43 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.HighDistChip = 10.0;
//#line 43 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.HighDistChip = 6.0;
//#line 43 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("HighDistChip", "double", 0, "High Speed Chip", "", &aiConfig::HighDistChip)));
//#line 43 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("HighDistChip", "double", 0, "High Speed Chip", "", &aiConfig::HighDistChip)));
//#line 44 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.FarForward = 0;
//#line 44 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.FarForward = 1;
//#line 44 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.FarForward = 0;
//#line 44 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("FarForward", "bool", 0, "Far Forward", "", &aiConfig::FarForward)));
//#line 44 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("FarForward", "bool", 0, "Far Forward", "", &aiConfig::FarForward)));
//#line 45 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.NearForward = 0;
//#line 45 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.NearForward = 1;
//#line 45 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.NearForward = 0;
//#line 45 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("NearForward", "bool", 0, "Near Forward", "", &aiConfig::NearForward)));
//#line 45 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("NearForward", "bool", 0, "Near Forward", "", &aiConfig::NearForward)));
//#line 46 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Area = 0.0;
//#line 46 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Area = 5.0;
//#line 46 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Area = 0.3;
//#line 46 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Area", "double", 0, "Pass Area", "", &aiConfig::Area)));
//#line 46 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Area", "double", 0, "Pass Area", "", &aiConfig::Area)));
//#line 47 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.DirectTrsh = 0.0;
//#line 47 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.DirectTrsh = 1.0;
//#line 47 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.DirectTrsh = 0.7;
//#line 47 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("DirectTrsh", "double", 0, "Pass/Shoot trsh", "", &aiConfig::DirectTrsh)));
//#line 47 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("DirectTrsh", "double", 0, "Pass/Shoot trsh", "", &aiConfig::DirectTrsh)));
//#line 48 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.SupportPriority = -10;
//#line 48 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.SupportPriority = 10;
//#line 48 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.SupportPriority = 1;
//#line 48 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("SupportPriority", "int", 0, "Supporter Priority", "", &aiConfig::SupportPriority)));
//#line 48 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("SupportPriority", "int", 0, "Supporter Priority", "", &aiConfig::SupportPriority)));
//#line 49 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.DribbleEveryWhere = 0;
//#line 49 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.DribbleEveryWhere = 1;
//#line 49 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.DribbleEveryWhere = 0;
//#line 49 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("DribbleEveryWhere", "bool", 0, "Dribble EveryWhere", "", &aiConfig::DribbleEveryWhere)));
//#line 49 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("DribbleEveryWhere", "bool", 0, "Dribble EveryWhere", "", &aiConfig::DribbleEveryWhere)));
//#line 50 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.DribbleInFast = 0;
//#line 50 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.DribbleInFast = 1;
//#line 50 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.DribbleInFast = 0;
//#line 50 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("DribbleInFast", "bool", 0, "Dribble in fast and critical", "", &aiConfig::DribbleInFast)));
//#line 50 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("DribbleInFast", "bool", 0, "Dribble in fast and critical", "", &aiConfig::DribbleInFast)));
//#line 51 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.ChipForward = 0;
//#line 51 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.ChipForward = 1;
//#line 51 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.ChipForward = 0;
//#line 51 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      DynamicPlay.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("ChipForward", "bool", 0, "Chip Forward not to goal", "", &aiConfig::ChipForward)));
//#line 51 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("ChipForward", "bool", 0, "Chip Forward not to goal", "", &aiConfig::ChipForward)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      DynamicPlay.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::DYNAMICPLAY, aiConfig::DEFAULT>(DynamicPlay)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::DYNAMICPLAY, aiConfig::DEFAULT>(DynamicPlay)));
aiConfig::GroupDescription<aiConfig::DEFAULT::MARK, aiConfig::DEFAULT> Mark("Mark", "tab", 0, 5, true, &aiConfig::DEFAULT::mark);
//#line 54 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.PlayOffManToMan = 0;
//#line 54 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.PlayOffManToMan = 1;
//#line 54 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.PlayOffManToMan = 0;
//#line 54 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("PlayOffManToMan", "bool", 0, "Play Off Man To Man", "", &aiConfig::PlayOffManToMan)));
//#line 54 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("PlayOffManToMan", "bool", 0, "Play Off Man To Man", "", &aiConfig::PlayOffManToMan)));
//#line 55 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.PlayOnManToMan = 0;
//#line 55 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.PlayOnManToMan = 1;
//#line 55 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.PlayOnManToMan = 0;
//#line 55 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("PlayOnManToMan", "bool", 0, "PlayOn Man To Man", "", &aiConfig::PlayOnManToMan)));
//#line 55 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("PlayOnManToMan", "bool", 0, "PlayOn Man To Man", "", &aiConfig::PlayOnManToMan)));
//#line 56 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.ManToManAllTransiant = 0;
//#line 56 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.ManToManAllTransiant = 1;
//#line 56 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.ManToManAllTransiant = 0;
//#line 56 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("ManToManAllTransiant", "bool", 0, "Man To Man All Transiant", "", &aiConfig::ManToManAllTransiant)));
//#line 56 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("ManToManAllTransiant", "bool", 0, "Man To Man All Transiant", "", &aiConfig::ManToManAllTransiant)));
//#line 57 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.ManToManSomeTransiant = 0;
//#line 57 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.ManToManSomeTransiant = 1;
//#line 57 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.ManToManSomeTransiant = 0;
//#line 57 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("ManToManSomeTransiant", "bool", 0, "Man To man Some Transiant", "", &aiConfig::ManToManSomeTransiant)));
//#line 57 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("ManToManSomeTransiant", "bool", 0, "Man To man Some Transiant", "", &aiConfig::ManToManSomeTransiant)));
//#line 58 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.OmmitWhoCouldNotReceivePass = 0;
//#line 58 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.OmmitWhoCouldNotReceivePass = 1;
//#line 58 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.OmmitWhoCouldNotReceivePass = 0;
//#line 58 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("OmmitWhoCouldNotReceivePass", "bool", 0, "Ommit Who Could Not Recieve Pass", "", &aiConfig::OmmitWhoCouldNotReceivePass)));
//#line 58 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("OmmitWhoCouldNotReceivePass", "bool", 0, "Ommit Who Could Not Recieve Pass", "", &aiConfig::OmmitWhoCouldNotReceivePass)));
//#line 59 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.OppOmitLimitPlayon = -6.0;
//#line 59 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.OppOmitLimitPlayon = 6.0;
//#line 59 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.OppOmitLimitPlayon = 2.0;
//#line 59 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("OppOmitLimitPlayon", "double", 0, "Opponent Ommit Limit Playon", "", &aiConfig::OppOmitLimitPlayon)));
//#line 59 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("OppOmitLimitPlayon", "double", 0, "Opponent Ommit Limit Playon", "", &aiConfig::OppOmitLimitPlayon)));
//#line 60 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.OppOmitLimitPlayoff = -6.0;
//#line 60 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.OppOmitLimitPlayoff = 6.0;
//#line 60 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.OppOmitLimitPlayoff = 2.0;
//#line 60 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("OppOmitLimitPlayoff", "double", 0, "Opponent Ommit Limit Playoff", "", &aiConfig::OppOmitLimitPlayoff)));
//#line 60 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("OppOmitLimitPlayoff", "double", 0, "Opponent Ommit Limit Playoff", "", &aiConfig::OppOmitLimitPlayoff)));
//#line 61 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.OppOmitLimitKickOff = -6.0;
//#line 61 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.OppOmitLimitKickOff = 6.0;
//#line 61 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.OppOmitLimitKickOff = 2.0;
//#line 61 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("OppOmitLimitKickOff", "double", 0, "Opponent Ommit Limit KickOff", "", &aiConfig::OppOmitLimitKickOff)));
//#line 61 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("OppOmitLimitKickOff", "double", 0, "Opponent Ommit Limit KickOff", "", &aiConfig::OppOmitLimitKickOff)));
//#line 62 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.ShootRatioBlock = 0.0;
//#line 62 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.ShootRatioBlock = 100.0;
//#line 62 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.ShootRatioBlock = 33.0;
//#line 62 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("ShootRatioBlock", "double", 0, "Shoot Ratio Blockp", "", &aiConfig::ShootRatioBlock)));
//#line 62 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("ShootRatioBlock", "double", 0, "Shoot Ratio Blockp", "", &aiConfig::ShootRatioBlock)));
//#line 63 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.PassRatioBlock = 0.0;
//#line 63 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.PassRatioBlock = 100.0;
//#line 63 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.PassRatioBlock = 33.0;
//#line 63 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("PassRatioBlock", "double", 0, "Pass Ratio Block", "", &aiConfig::PassRatioBlock)));
//#line 63 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("PassRatioBlock", "double", 0, "Pass Ratio Block", "", &aiConfig::PassRatioBlock)));
//#line 64 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.OmmitNearestToBallPlayon = 0;
//#line 64 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.OmmitNearestToBallPlayon = 1;
//#line 64 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.OmmitNearestToBallPlayon = 0;
//#line 64 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("OmmitNearestToBallPlayon", "bool", 0, "Ommit Nearest To ball Playon", "", &aiConfig::OmmitNearestToBallPlayon)));
//#line 64 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("OmmitNearestToBallPlayon", "bool", 0, "Ommit Nearest To ball Playon", "", &aiConfig::OmmitNearestToBallPlayon)));
//#line 65 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.IntelligentMarkType = 0;
//#line 65 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.IntelligentMarkType = 1;
//#line 65 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.IntelligentMarkType = 0;
//#line 65 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IntelligentMarkType", "bool", 0, "Intelligent Mark Type", "", &aiConfig::IntelligentMarkType)));
//#line 65 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IntelligentMarkType", "bool", 0, "Intelligent Mark Type", "", &aiConfig::IntelligentMarkType)));
//#line 66 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.IntelligentMarkPrediction = 0;
//#line 66 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.IntelligentMarkPrediction = 1;
//#line 66 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.IntelligentMarkPrediction = 1;
//#line 66 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IntelligentMarkPrediction", "bool", 0, "Intelligent Mark Prediction", "", &aiConfig::IntelligentMarkPrediction)));
//#line 66 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("IntelligentMarkPrediction", "bool", 0, "Intelligent Mark Prediction", "", &aiConfig::IntelligentMarkPrediction)));
//#line 67 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.VelReliability = 0.0;
//#line 67 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.VelReliability = 1.0;
//#line 67 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.VelReliability = 0.5;
//#line 67 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Mark.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("VelReliability", "double", 0, "VelReliability", "", &aiConfig::VelReliability)));
//#line 67 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("VelReliability", "double", 0, "VelReliability", "", &aiConfig::VelReliability)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Mark.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::MARK, aiConfig::DEFAULT>(Mark)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::MARK, aiConfig::DEFAULT>(Mark)));
aiConfig::GroupDescription<aiConfig::DEFAULT::PASSPOSITION, aiConfig::DEFAULT> PassPosition("PassPosition", "tab", 0, 6, true, &aiConfig::DEFAULT::passposition);
//#line 70 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Big_Step_X = 0.0;
//#line 70 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Big_Step_X = 12.0;
//#line 70 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Big_Step_X = 1.0;
//#line 70 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PassPosition.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Big_Step_X", "double", 0, "Big Step X", "", &aiConfig::Big_Step_X)));
//#line 70 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Big_Step_X", "double", 0, "Big Step X", "", &aiConfig::Big_Step_X)));
//#line 71 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Big_Step_Y = 0.0;
//#line 71 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Big_Step_Y = 9.0;
//#line 71 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Big_Step_Y = 0.8;
//#line 71 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PassPosition.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Big_Step_Y", "double", 0, "Big Step Y", "", &aiConfig::Big_Step_Y)));
//#line 71 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Big_Step_Y", "double", 0, "Big Step Y", "", &aiConfig::Big_Step_Y)));
//#line 72 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Small_Step_X = 0.0;
//#line 72 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Small_Step_X = 12.0;
//#line 72 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Small_Step_X = 0.3;
//#line 72 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PassPosition.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Small_Step_X", "double", 0, "Small Step X", "", &aiConfig::Small_Step_X)));
//#line 72 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Small_Step_X", "double", 0, "Small Step X", "", &aiConfig::Small_Step_X)));
//#line 73 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Small_Step_Y = 0.0;
//#line 73 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Small_Step_Y = 9.0;
//#line 73 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Small_Step_Y = 0.3;
//#line 73 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PassPosition.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Small_Step_Y", "double", 0, "Small Step Y", "", &aiConfig::Small_Step_Y)));
//#line 73 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Small_Step_Y", "double", 0, "Small Step Y", "", &aiConfig::Small_Step_Y)));
//#line 74 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.Ball_Decel = 0.0;
//#line 74 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.Ball_Decel = 10.0;
//#line 74 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.Ball_Decel = 2.0;
//#line 74 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PassPosition.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Ball_Decel", "double", 0, "Ball deceleration", "", &aiConfig::Ball_Decel)));
//#line 74 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("Ball_Decel", "double", 0, "Ball deceleration", "", &aiConfig::Ball_Decel)));
//#line 75 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.ChipPass_Recv_StayBackFactor = 0.0;
//#line 75 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.ChipPass_Recv_StayBackFactor = 10.0;
//#line 75 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.ChipPass_Recv_StayBackFactor = 2.0;
//#line 75 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      PassPosition.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("ChipPass_Recv_StayBackFactor", "double", 0, "ChipPass Recv StayBackFactor", "", &aiConfig::ChipPass_Recv_StayBackFactor)));
//#line 75 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("ChipPass_Recv_StayBackFactor", "double", 0, "ChipPass Recv StayBackFactor", "", &aiConfig::ChipPass_Recv_StayBackFactor)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      PassPosition.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::PASSPOSITION, aiConfig::DEFAULT>(PassPosition)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::PASSPOSITION, aiConfig::DEFAULT>(PassPosition)));
aiConfig::GroupDescription<aiConfig::DEFAULT::LINEUP, aiConfig::DEFAULT> LineUp("LineUp", "tab", 0, 7, true, &aiConfig::DEFAULT::lineup);
//#line 78 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.startPoint_X = -6.0;
//#line 78 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.startPoint_X = 6.0;
//#line 78 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.startPoint_X = 3.0;
//#line 78 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      LineUp.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("startPoint_X", "double", 0, "Start Point of Line (x)", "", &aiConfig::startPoint_X)));
//#line 78 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("startPoint_X", "double", 0, "Start Point of Line (x)", "", &aiConfig::startPoint_X)));
//#line 79 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.startPoint_Y = -4.5;
//#line 79 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.startPoint_Y = 4.5;
//#line 79 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.startPoint_Y = -4.5;
//#line 79 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      LineUp.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("startPoint_Y", "double", 0, "start Point of Line (y)", "", &aiConfig::startPoint_Y)));
//#line 79 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("startPoint_Y", "double", 0, "start Point of Line (y)", "", &aiConfig::startPoint_Y)));
//#line 80 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.lineDirection = 0.0;
//#line 80 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.lineDirection = 360.0;
//#line 80 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.lineDirection = 0.0;
//#line 80 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      LineUp.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("lineDirection", "double", 0, "Direction of the Line", "", &aiConfig::lineDirection)));
//#line 80 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("lineDirection", "double", 0, "Direction of the Line", "", &aiConfig::lineDirection)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      LineUp.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::LINEUP, aiConfig::DEFAULT>(LineUp)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::LINEUP, aiConfig::DEFAULT>(LineUp)));
aiConfig::GroupDescription<aiConfig::DEFAULT::COACH, aiConfig::DEFAULT> Coach("Coach", "tab", 0, 8, true, &aiConfig::DEFAULT::coach);
//#line 84 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.kickThreshold = 0.0;
//#line 84 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.kickThreshold = 10.0;
//#line 84 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.kickThreshold = 0.1;
//#line 84 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("kickThreshold", "double", 0, "Kick Threshold", "", &aiConfig::kickThreshold)));
//#line 84 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("kickThreshold", "double", 0, "Kick Threshold", "", &aiConfig::kickThreshold)));
//#line 85 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.oneTouchKickThreshold = 0.0;
//#line 85 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.oneTouchKickThreshold = 10.0;
//#line 85 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.oneTouchKickThreshold = 0.05;
//#line 85 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("oneTouchKickThreshold", "double", 0, "OneTouch Kick Threshold", "", &aiConfig::oneTouchKickThreshold)));
//#line 85 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("oneTouchKickThreshold", "double", 0, "OneTouch Kick Threshold", "", &aiConfig::oneTouchKickThreshold)));
//#line 86 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.oneTouchAngleThreshold = 0.0;
//#line 86 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.oneTouchAngleThreshold = 360.0;
//#line 86 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.oneTouchAngleThreshold = 75.0;
//#line 86 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("oneTouchAngleThreshold", "double", 0, "OneTouch Angle Threshold", "", &aiConfig::oneTouchAngleThreshold)));
//#line 86 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("oneTouchAngleThreshold", "double", 0, "OneTouch Angle Threshold", "", &aiConfig::oneTouchAngleThreshold)));
//#line 87 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.kickClosedAngle = 0.0;
//#line 87 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.kickClosedAngle = 360.0;
//#line 87 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.kickClosedAngle = 40.0;
//#line 87 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("kickClosedAngle", "double", 0, "Kick Closed Angle", "", &aiConfig::kickClosedAngle)));
//#line 87 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("kickClosedAngle", "double", 0, "Kick Closed Angle", "", &aiConfig::kickClosedAngle)));
//#line 88 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.numberOfDefenseEval = 0;
//#line 88 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.numberOfDefenseEval = 1;
//#line 88 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.numberOfDefenseEval = -1;
//#line 88 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("numberOfDefenseEval", "int", 0, "Eval Defense", "", &aiConfig::numberOfDefenseEval)));
//#line 88 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<int>("numberOfDefenseEval", "int", 0, "Eval Defense", "", &aiConfig::numberOfDefenseEval)));
//#line 89 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.useGoalieInPlayoff = 0;
//#line 89 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.useGoalieInPlayoff = 1;
//#line 89 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.useGoalieInPlayoff = 1;
//#line 89 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("useGoalieInPlayoff", "bool", 0, "Use Goalie In Plan", "", &aiConfig::useGoalieInPlayoff)));
//#line 89 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<bool>("useGoalieInPlayoff", "bool", 0, "Use Goalie In Plan", "", &aiConfig::useGoalieInPlayoff)));
//#line 90 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.playMakeStopThr = 0.0;
//#line 90 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.playMakeStopThr = 2.0;
//#line 90 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.playMakeStopThr = 0.3;
//#line 90 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("playMakeStopThr", "double", 0, "Threshold Plamake for stoped ball", "", &aiConfig::playMakeStopThr)));
//#line 90 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("playMakeStopThr", "double", 0, "Threshold Plamake for stoped ball", "", &aiConfig::playMakeStopThr)));
//#line 91 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.playMakeMoveThr = 0.0;
//#line 91 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.playMakeMoveThr = 2.0;
//#line 91 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.playMakeMoveThr = 0.2;
//#line 91 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("playMakeMoveThr", "double", 0, "Threshold Plamake for moving ball", "", &aiConfig::playMakeMoveThr)));
//#line 91 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("playMakeMoveThr", "double", 0, "Threshold Plamake for moving ball", "", &aiConfig::playMakeMoveThr)));
//#line 92 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __min__.penaltyMargin = 0.0;
//#line 92 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __max__.penaltyMargin = 1.0;
//#line 92 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __default__.penaltyMargin = 0.3;
//#line 92 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      Coach.abstract_parameters.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("penaltyMargin", "double", 0, "margin for pushing penalty area", "", &aiConfig::penaltyMargin)));
//#line 92 "/home/hamidhamidrezaroodabeh/Desktop/parsian_ws/src/parsian_ssl/parsian_ai/cfg/ai.cfg"
      __param_descriptions__.push_back(aiConfig::AbstractParamDescriptionConstPtr(new aiConfig::ParamDescription<double>("penaltyMargin", "double", 0, "margin for pushing penalty area", "", &aiConfig::penaltyMargin)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Coach.convertParams();
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::COACH, aiConfig::DEFAULT>(Coach)));
//#line 123 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT::COACH, aiConfig::DEFAULT>(Coach)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(aiConfig::AbstractGroupDescriptionConstPtr(new aiConfig::GroupDescription<aiConfig::DEFAULT, aiConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<aiConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<aiConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<aiConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    aiConfig __max__;
    aiConfig __min__;
    aiConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const aiConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static aiConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &aiConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const aiConfig &aiConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const aiConfig &aiConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const aiConfig &aiConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<aiConfig::AbstractParamDescriptionConstPtr> &aiConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<aiConfig::AbstractGroupDescriptionConstPtr> &aiConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const aiConfigStatics *aiConfig::__get_statics__()
  {
    const static aiConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = aiConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __AIRECONFIGURATOR_H__
