#!/usr/bin/env python
PACKAGE='ai_config'

from dynamic_reconfigure.parameter_generator_catkin import *

generator = ParameterGenerator()

#_GROUP_TYPES = {
#    '': 'BoxGroup',
#    'collapse': 'CollapseGroup',
#    'tab': 'TabGroup',
#    'hide': 'HideGroup',
#    'apply': 'ApplyGroup',
#}

formation = generator.add_group("Formation", state = True, type = 'tab')
formation.add("StrictFormation", bool_t, 0, "Strict Formation", False)
formation.add("GoalieFromGUI", bool_t, 0, "Goalie from GUI", False)
formation.add("Goalie", int_t, 0, "Goalie ID", 11, 0, 11)
formation.add("Defense", int_t, 0, "Defense Count", 0, 0, 11)


defense = generator.add_group("Defense", state = True, type = 'tab')
defense.add("NoClear", bool_t, 0, "No Clear", False)
defense.add("DyanmicDefense", bool_t, 0, "Dynamic number of defense", False)
defense.add("Probability", double_t, 0, "Probability", 0.5, 0, 1)


playoff = generator.add_group("PlayOff", state = True, type = 'tab')
playoff.add("IDBasePasser", bool_t, 0, "ID Base Passer", False)
playoff.add("PasserID", int_t, 0, "Passer ID", 0, 0, 11)
playoff.add("IDBaseOneToucher", bool_t, 0, "ID Base OneToucher", False)
playoff.add("OneToucherID", int_t, 0, "One Toucher ID ", 0, 0, 11)
playoff.add("UseFastPlay", bool_t, 0, "Use Fast Play", False)
playoff.add("UseFirstPlay", bool_t, 0, "Use First Play", False)
playoff.add("UseBlockBlocker", bool_t, 0, "Use Blocker Block", False)
playoff.add("UseForcedBlock", bool_t, 0, "Forced Blocker Block", False)


dynamicplay = generator.add_group("DynamicPlay", state = True, type = 'tab')
dynamicplay.add("LowSpeedPass", double_t, 0, "Low Speed Pass", 1, 0, 10)
dynamicplay.add("MediumSpeedPass", double_t, 0, "Medium Speed Pass", 3, 0, 10)
dynamicplay.add("HighSpeedPass", double_t, 0, "High Speed Pass", 6, 0, 10)
dynamicplay.add("LowDistChip", double_t, 0, "Low Speed Chip", 1, 0, 10)
dynamicplay.add("MediumDistChip", double_t, 0, "Medium Speed Chip", 3, 0, 10)
dynamicplay.add("HighDistChip", double_t, 0, "High Speed Chip", 6, 0, 10)
dynamicplay.add("FarForward", bool_t, 0, "Far Forward", False)
dynamicplay.add("NearForward", bool_t, 0, "Near Forward", False)
dynamicplay.add("Area", double_t, 0, "Pass Area", 0.3, 0, 5)
dynamicplay.add("DirectTrsh", double_t, 0, "Pass/Shoot trsh", 0.7, 0, 1)
dynamicplay.add("SupportPriority", int_t, 0, "Supporter Priority", 1, -10, 10)
dynamicplay.add("DribbleEveryWhere", bool_t, 0, "Dribble EveryWhere", False)
dynamicplay.add("DribbleInFast", bool_t, 0, "Dribble in fast and critical", False)
dynamicplay.add("ChipForward", bool_t, 0, "Chip Forward not to goal", False)
mark = generator.add_group("Mark", state = True, type = 'tab')
mark.add("PlayOffManToMan", bool_t, 0, "Play Off Man To Man", False)
mark.add("PlayOnManToMan", bool_t, 0, "PlayOn Man To Man", False)
mark.add("ManToManAllTransiant", bool_t, 0, "Man To Man All Transiant", False)
mark.add("ManToManSomeTransiant", bool_t, 0, "Man To man Some Transiant", False)
mark.add("OmmitWhoCouldNotReceivePass", bool_t, 0, "Ommit Who Could Not Recieve Pass", False)
mark.add("OppOmitLimitPlayon", double_t, 0, "Opponent Ommit Limit Playon", 2.0, -6, 6)
mark.add("OppOmitLimitPlayoff", double_t, 0, "Opponent Ommit Limit Playoff", 2.0, -6, 6)
mark.add("OppOmitLimitKickOff", double_t, 0, "Opponent Ommit Limit KickOff", 2.0, -6, 6)
mark.add("ShootRatioBlock", double_t, 0, "Shoot Ratio Blockp", 33.0, 0, 100)
mark.add("PassRatioBlock" , double_t, 0, "Pass Ratio Block"  , 33.0, 0, 100)
mark.add("OmmitNearestToBallPlayon", bool_t, 0, "Ommit Nearest To ball Playon", False)
mark.add("IntelligentMarkType", bool_t, 0, "Intelligent Mark Type", False)
mark.add("IntelligentMarkPrediction", bool_t, 0, "Intelligent Mark Prediction", True)
mark.add("VelReliability", double_t, 0, "VelReliability", 0.5, 0, 1)

localsettings_enum = generator.enum([ generator.const("CornerLeft", str_t, "OurCornerL", "our corner left"),
                                      generator.const("CornerRight", str_t, "OurCornerR", "our corner right"),
                                      generator.const("parsian", str_t, "parsian", "parsian"),
                                    ],"An enum to set size")
lineupposition = generator.add_group("LineUpPosition", state = True, type = 'tab')
# lineupposition.add("LineUpPosition", str_t, 0, "line up positions", "OurCornerL", edit_method=localsettings_enum)
lineupposition.add("ParsianWorkShop", bool_t, 0, "Parsian Workshop", False)

# lineupposition.add("MixTeamIP", str_t, 0, "MixTeam Send/Read IP", "127.0.0.1")
# lineupposition.add("MixTeamPort", int_t, 0, "MixTeam Send/Read Port", 1234, 0, 65500)
# lineupposition.add("MixTeamIDs", str_t, 0, "MixTeam Our Robot IDs(hex)", "01234")

passposition = generator.add_group("PassPosition", state = True, type = 'tab')
passposition.add("Big_Step_X", double_t, 0, "Big Step X", 1.000, 0, 12)
passposition.add("Big_Step_Y", double_t, 0, "Big Step Y", 0.800, 0, 9)
passposition.add("Small_Step_X", double_t, 0, "Small Step X", 0.300, 0, 12)
passposition.add("Small_Step_Y", double_t, 0, "Small Step Y", 0.300, 0, 9)
passposition.add("Ball_Decel", double_t, 0, "Ball deceleration", 2.0, 0, 10)
passposition.add("ChipPass_Recv_StayBackFactor", double_t, 0, "ChipPass Recv StayBackFactor", 2.0, 0, 10)

coach = generator.add_group("Coach", state = True, type = 'tab')
coach.add("kickThreshold", double_t, 0, "Kick Threshold", 0.1, 0, 10)
coach.add("oneTouchKickThreshold", double_t, 0, "OneTouch Kick Threshold", 0.05, 0, 10)
coach.add("oneTouchAngleThreshold", double_t, 0, "OneTouch Angle Threshold", 75, 0, 360)
coach.add("kickClosedAngle", double_t, 0, "Kick Closed Angle", 40, 0, 360)
coach.add("numberOfDefenseEval", int_t, 0, "Eval Defense", -1, 0, 1)
coach.add("playMakeStopThr", double_t, 0, "Threshold Plamake for stoped ball", 0.3, 0, 2)
coach.add("playMakeMoveThr", double_t, 0, "Threshold Plamake for moving ball", 0.2, 0, 2)
coach.add("penaltyMargin", double_t, 0, "margin for pushing penalty area", 0.3, 0, 1)

exit(generator.generate(PACKAGE, "ai_config", "ai"))
