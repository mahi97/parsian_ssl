#!/usr/bin/env python
PACKAGE='ai_config'

from dynamic_reconfigure.parameter_generator_catkin import *

generator = ParameterGenerator()

formation = generator.add_group("Formation", state = True)
formation.add("StrictFormation", bool_t, 0, "Strict Formation", False)
formation.add("GoalieFromGUI", bool_t, 0, "Goalie from GUI", False)
formation.add("Goalie", int_t, 0, "Goalie ID", 1, -50, 50)
formation.add("Defense", int_t, 0, "Defense Count", 1)

playmaker = generator.add_group("PlayMaker", state = True)
playmaker.add("JustKickToGoal", bool_t, 0, "just kick to goal", True)
playmaker.add("JustChipToGoalInBelowDist", bool_t, 0, "just Chip To Goal In Below Distance From Our Goal", True)
playmaker.add("ChipToGoalDist", double_t, 0, "X Dist From Our Goal", 0.0, -50, 50)
playmaker.add("PlayMakerKickThreshold", double_t, 0, "Kick Threshold", 0.5, -50, 50)
playmaker.add("OneTouchKickThreshold", double_t, 0, "Onetouch Threshold", 0.5, -50, 50)
playmaker.add("OneTouchAngleThreshold", double_t, 0, "Onetouch Angle", 80, -50, 100)
playmaker.add("OneTouchabilityAngleThreshold", double_t, 0, "Onetouchability Angle", 100, -200, 200)
playmaker.add("PlayMakerOppObstacleFactorInChip", double_t, 0, "Opp Obstacle Factor in Chi", 2, -50, 50)
playmaker.add("UnderEstimateTheirGoalie", double_t, 0, "Under estimate their goalie", 0.5, -50, 50)

ourkickoff = generator.add_group("OurKickOff", state = True)
ourkickoff.add("OurKickOffChipToGoal", bool_t, 0, "chip to goal", False)

ourindirect = generator.add_group("OurIndirect", state = True)
ourindirect.add("OurIndirectChipToGoal", bool_t, 0, "chip to goal", False)
ourindirect.add("OouIndirectNoPass", bool_t, 0, "no pass", False)
ourindirect.add("OurIndirectChipToGoalInOurField", bool_t, 0, "Chip to Goal in Our field", False)
ourindirect.add("OurIndirectShadowyPosition", bool_t, 0, "Shadowy position", False)
ourindirect.add("IndirectType", int_t, 0, "Indirect Type", 1, -50, 50)

ourdirect = generator.add_group("OurDirect", state = True)
ourdirect.add("OurDirectChipToGoal", bool_t, 0, "Chip to Goal", False)
ourdirect.add("OurDirectShadowyPosition", bool_t, 0, "Shadowy position", False)
ourdirect.add("OurDirectChipToGoalInOurField", bool_t, 0, "Chip to Goal in Our field", False)
ourdirect.add("CornerChip", bool_t, 0, "Corner chip", False)
ourdirect.add("CornerKick", bool_t, 0, "Corner kick", False)


defense = generator.add_group("Defense", state = True)
defense.add("NoClear", bool_t, 0, "No Clear", False)
defense.add("DefenseNoPass", bool_t, 0, "No Pass", False)
defense.add("ChipClear", bool_t, 0, "Chip Clear", False)
defense.add("SwapClearer", bool_t, 0, "Swap Cleare",  True)
defense.add("DefenseOppObstacleFactorInChip", double_t, 0, "Opp Obstacle Factor in Chip", 4.0, -50, 50)
defense.add("DefenseKickThreshold", double_t, 0, "Kick threshold", 0.2, -50, 50)
defense.add("ChipThreshold", double_t, 0, "Chip threshold", 0.05, -50, 50)
defense.add("MarkingDef", int_t, 0, "Marking Defense", 0, -50, 50)

playoff = generator.add_group("PlayOn", state = True)
playoff.add("IDBasePasser", bool_t, 0, "ID Base Passer", False)
playoff.add("PasserID", int_t, 0, "Passer ID", 0, -50, 50)
playoff.add("IDBaseOneToucher", bool_t, 0, "ID Base OneToucher", False)
playoff.add("OneToucherID", int_t, 0, "One Toucher ID ", 0, -50, 50)
playoff.add("UseFastPlay", bool_t, 0, "Use Fast Play", False)
playoff.add("UseFirstPlay", bool_t, 0, "Use First Play", False)
playoff.add("UseBlockBlocker", bool_t, 0, "Use Blocker Block", False)
playoff.add("UseForcedBlock", bool_t, 0, "Forced Blocker Block", False)


dynamicplay = generator.add_group("DynamicPlay", state = True)
dynamicplay.add("LowSpeedPass", double_t, 0, "Low Speed Pass", 0, -50, 50)
dynamicplay.add("MediumSpeedPass", double_t, 0, "Medium Speed Pass", 0, -50, 50)
dynamicplay.add("HighSpeedPass", double_t, 0, "High Speed Pass", 0, -50, 50)
dynamicplay.add("LowSpeedChip", double_t, 0, "Low Speed Chip", 0, -50, 50)
dynamicplay.add("MediumSpeedChip", double_t, 0, "Medium Speed Chip", 0, -50, 50)
dynamicplay.add("HighSpeedChip", double_t, 0, "High Speed Chip", 0, -50, 50)
dynamicplay.add("FarForward", bool_t, 0, "Far Forward", False)
dynamicplay.add("NearForward", bool_t, 0, "Near Forward", False)
dynamicplay.add("Area", double_t, 0, "Pass Area", 0.3, -50, 50)
dynamicplay.add("DirectTrsh", double_t, 0, "Pass/Shoot trsh", 0.7, -50, 50)
dynamicplay.add("SupportPriority", int_t, 0, "Supporter Priority", 1, -50, 50)
dynamicplay.add("DribbleEveryWhere", bool_t, 0, "Dribble EveryWhere", False)
dynamicplay.add("DribbleInFast", bool_t, 0, "Dribble in fast and critical", False)
dynamicplay.add("ChipForward", bool_t, 0, "Chip Forward not to goal", False)

mark = generator.add_group("Mark", state = True)
mark.add("PlayOffManToMan", bool_t, 0, "Play Off Man To Man", False)
mark.add("PlayOnManToMan", bool_t, 0, "PlayOn Man To Man", False)
mark.add("ManToManAllTransiant", bool_t, 0, "Man To Man All Transiant", False)
mark.add("ManToManSomeTransiant", bool_t, 0, "Man To man Some Transiant", False)
mark.add("OmmitWhoCouldNotReceivePass", bool_t, 0, "Ommit Who Could Not Recieve Pass", False)
mark.add("OppOmitLimitPlayon", double_t, 0, "Opponent Ommit Limit Playon", 2.0, -50, 50)
mark.add("OppOmitLimitPlayoff", double_t, 0, "Opponent Ommit Limit Playoff", 2.0, -50, 50)
mark.add("OppOmitLimitKickOff", double_t, 0, "Opponent Ommit Limit KickOff", 2.0, -50, 50)
mark.add("ShootRatioBlock", double_t, 0, "Shoot Ratio Blockp", 33.0,100, 100)
mark.add("PassRatioBlock", double_t, 0, "Pass Ratio Block", 33.0, -100, 100)
mark.add("OmmitNearestToBallPlayon", bool_t, 0, "Ommit Nearest To ball Playon", False)
mark.add("IntelligentMarkType", bool_t, 0, "Intelligent Mark Type", False)
mark.add("IntelligentMarkPrediction", bool_t, 0, "Intelligent Mark Prediction", True)
mark.add("VelReliability", double_t, 0, "VelReliability", 0.5, -50, 50)

localsettings_enum = generator.enum([ generator.const("CornerLeft", str_t, "OurCornerL", "our corner left"),
                                      generator.const("CornerRight", str_t, "OurCornerR", "our corner right"),
                                      generator.const("parsian", str_t, "parsian", "parsian"),
                                    ],"An enum to set size")
lineupposition = generator.add_group("LineUpPosition", state = True)
lineupposition.add("LineUpPosition", str_t, 0, "line up positions", "OurCornerL", edit_method=localsettings_enum)

lineupposition.add("ParsianWorkShop", bool_t, 0, "Parsian Workshop", False)
lineupposition.add("MixTeamIP", str_t, 0, "MixTeam Send/Read IP", "127.0.0.1")
lineupposition.add("MixTeamPort", int_t, 0, "MixTeam Send/Read Port", 1234, 0, 65500)
lineupposition.add("MixTeamIDs", str_t, 0, "MixTeam Our Robot IDs(hex)", "01234")

passposition = generator.add_group("PassPosition", state = True)
passposition.add("Big_Step_X", double_t, 0, "Big Step X", 1.000, -50, 50)
passposition.add("Big_Step_Y", double_t, 0, "Big Step Y", 0.800, -50, 50)
passposition.add("Small_Step_X", double_t, 0, "Small Step X", 0.300, -50, 50)
passposition.add("Small_Step_Y", double_t, 0, "Small Step Y", 0.300, -50, 50)
passposition.add("Ball_Decel", double_t, 0, "Ball deceleration", 2.0, -50, 50)
passposition.add("ChipPass_Recv_StayBackFactor", double_t, 0, "ChipPass Recv StayBackFactor", 2.0, -50, 50)

coach = generator.add_group("Coach", state = True)
coach.add("kickThreshold", double_t, 0, "Kick Threshold", 0.1, -50, 50)
coach.add("oneTouchKickThreshold", double_t, 0, "OneTouch Kick Threshold", 0.05, -50, 50)
coach.add("oneTouchAngleThreshold", double_t, 0, "OneTouch Angle Threshold", 75, -50, 50)
coach.add("kickClosedAngle", double_t, 0, "Kick Closed Angle", 40, -50, 50)



exit(generator.generate(PACKAGE, "ai_config", "ai"))
